{"version":3,"sources":["components/todoitems.js","App.js","serviceWorker.js","index.js"],"names":["ToDoItems","props","completedStyle","textDecoration","color","className","items","map","item","key","itemId","type","checked","itemCompleted","onChange","changeItemStatus","style","htmlFor","itemName","aria-label","title","onClick","handleDelete","aria-hidden","length","todoItemsCount","todoItemsPending","role","App","todoFromLocal","localStorage","getItem","JSON","parse","state","todoItems","filter","enterPressed","bind","updateAllItems","prevProps","prevState","this","setItem","stringify","removeItem","setState","event","target","value","trim","document","getElementById","inputItemName","updatedToDoItems","newItem","Math","random","push","allItemsCompleted","i","placeholder","aria-describedby","id","name","autoComplete","onKeyPress","fontSize","href","rel","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.09baf512.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction ToDoItems(props) {\r\n    const completedStyle = {\r\n        textDecoration: \"line-through\",\r\n        color: \"#d9d9d9\"\r\n    }\r\n    return (\r\n\r\n        <div className=\"container\">\r\n            <ul className=\"list-group\">\r\n                {\r\n                    props.items.map(item =>\r\n                        <li className=\"list-group-item\" key={item.itemId}>\r\n                            <div className=\"form-check\">\r\n                                <input className=\"form-check-input\" type=\"checkbox\" checked={item.itemCompleted} onChange={() => props.changeItemStatus(item.itemId)} />\r\n                                <label className=\"form-check-label lead\" style={item.itemCompleted ? completedStyle : null} htmlFor={\"defaultCheck\" + item.itemId}>\r\n                                    {item.itemName}\r\n                                </label>\r\n                                <button type=\"button\" className=\"close\" aria-label=\"Close\" title=\"Remove item\" onClick={() => props.handleDelete(item.itemId)}>\r\n                                    <span aria-hidden=\"true\" style={{ color: \"red\" }}>&times;</span>\r\n                                </button>\r\n                            </div>\r\n                        </li>\r\n\r\n                    )\r\n                }\r\n                {\r\n                    props.items.length > 0 ?\r\n                        <li className=\"list-group-item\">\r\n                            <div>\r\n                                <label className=\"form-check-label\">\r\n                                    Total items : <span className=\"badge badge-pill badge-secondary\">{props.todoItemsCount}</span>&nbsp;\r\n                                    Items left : <span className=\"badge badge-pill badge-warning\">{props.todoItemsPending}</span>&nbsp;\r\n                                    Items Completed : <span className=\"badge badge-pill badge-success\">{props.todoItemsCount - props.todoItemsPending}</span>&nbsp;\r\n                                </label>\r\n                                \r\n                                <div className=\"float-right\">\r\n                                    <button type=\"button\" className=\"btn btn-link\" onClick={() => props.handleDelete()}>Clear completed</button> \r\n                                </div>\r\n                                </div>\r\n                        </li>\r\n                    : \r\n                    <li className=\"list-group-item\">\r\n                        <div className=\"alert alert-warning\" role=\"alert\">\r\n                            List is empty start adding items !!\r\n                        </div>\r\n                    </li> \r\n                }\r\n            </ul> \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ToDoItems","import React from 'react';\nimport './App.css';\nimport ToDoItems from './components/todoitems'\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    //TODO: set expiry time for localstorage\n    let todoFromLocal = localStorage.getItem(\"todosData\") ? JSON.parse(localStorage.getItem(\"todosData\")) : [];\n\n    this.state = {\n      todoItems: todoFromLocal,\n      todoItemsCount: todoFromLocal.length,\n      todoItemsPending: todoFromLocal.filter((item) => { return item.itemCompleted === false; }).length\n    }\n\n    this.enterPressed = this.enterPressed.bind(this);\n    this.updateAllItems = this.updateAllItems.bind(this);\n    this.changeItemStatus = this.changeItemStatus.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.todoItems.length > 0)\n      localStorage.setItem(\"todosData\", JSON.stringify(this.state.todoItems));\n    else\n      localStorage.removeItem(\"todosData\");\n\n    if (prevState.todoItems !== this.state.todoItems) {\n      this.setState({\n        todoItemsCount: this.state.todoItems.length,\n        todoItemsPending: this.state.todoItems.filter((item) => { return item.itemCompleted === false; }).length\n      })\n    }\n  }\n\n  enterPressed(event) {  \n    if ((event.key === \"Enter\"  && event.target.value.trim() !== \"\" ) || (event.type===\"click\" && document.getElementById(\"txtInputItem\").value.trim() !== \"\")) {\n\n      let inputItemName=\"\";\n\n      if(event.type===\"click\"){\n        inputItemName = document.getElementById(\"txtInputItem\").value.trim();\n        document.getElementById(\"txtInputItem\").value =\"\";\n      }\n      else{\n        inputItemName =  event.target.value.trim();\n        event.target.value = \"\";\n      }\n\n      this.setState(prevState => {\n        let updatedToDoItems = [...prevState.todoItems];\n\n        const newItem = { itemId: Math.random(), itemName: inputItemName, itemCompleted: false }\n        updatedToDoItems.push(newItem);\n\n        return {\n          todoItems: updatedToDoItems\n        }\n      })\n    }\n  }\n\n  updateAllItems() {\n    this.setState(prevState => {\n      let updatedToDoItems = [...prevState.todoItems];\n      let allItemsCompleted = false;\n\n      for (let i = 0; i < updatedToDoItems.length; i++) {\n        if (!updatedToDoItems[i].itemCompleted) {\n          allItemsCompleted = true;\n          break;\n        }\n      }\n\n\n      updatedToDoItems = updatedToDoItems.map(item => {\n        item.itemCompleted = allItemsCompleted;\n        return item\n      })\n\n      return {\n        todoItems: updatedToDoItems\n      }\n    })\n  }\n\n  changeItemStatus(itemId) {\n    this.setState(prevState => {\n\n      let updatedToDoItems = [...prevState.todoItems];\n\n      updatedToDoItems = updatedToDoItems.map(item => {\n        if (item.itemId === itemId) {\n          item.itemCompleted = !item.itemCompleted;\n        }\n\n        return item\n      })\n\n      return {\n        todoItems: updatedToDoItems\n      }\n    })\n\n  }\n\n  handleDelete(itemId) {\n    this.setState(prevState => {\n      let updatedToDoItems = [...prevState.todoItems];\n      if (itemId) {\n        updatedToDoItems = updatedToDoItems.filter((item) => { return item.itemId !== itemId; })\n      }\n      else {\n        updatedToDoItems = updatedToDoItems.filter((item) => { return item.itemCompleted === false; })\n      }\n\n      return {\n        todoItems: updatedToDoItems\n      }\n    })\n  }\n\n\n\n  render() {\n    return (\n      <>\n        <div className=\"jumbotron jumbotron-fluid\">\n          <div className=\"container\">\n            <h1 className=\"display-4 text-center\"><i className=\"fa fa-list\"></i>&nbsp;ToDos App</h1> \n          </div>\n        </div> \n        <div className=\"container\">\n          <div className=\"input-group input-group-lg\">\n            <div className=\"input-group-prepend\">\n              <button className=\"btn btn-info btn-sm\" type=\"button\" onClick={this.updateAllItems}  title=\"Mark/Unmark All\"><i className=\"fa fa-check\" aria-hidden=\"true\"></i></button>\n            </div>\n            <input type=\"text\"\n              className=\"form-control\"\n              placeholder=\"Enter item to add\"\n              aria-label=\"Enter item to add\"\n              aria-describedby=\"inputGroup-sizing-lg\"\n              id=\"txtInputItem\"\n              name=\"txtInputItem\"\n              autoComplete=\"off\"\n              onKeyPress={this.enterPressed} />\n            <div className=\"input-group-append\">\n              <button className=\"btn btn-info\" type=\"button\" onClick={this.enterPressed} title=\"Add item\"><i className=\"fa fa-plus\"></i></button>\n            </div>\n          </div> \n        </div>\n        <div className=\"container\">\n            &nbsp;\n        </div>\n        <ToDoItems items={this.state.todoItems}\n          changeItemStatus={this.changeItemStatus}\n          handleDelete={this.handleDelete}\n          todoItemsCount={this.state.todoItemsCount}\n          todoItemsPending={this.state.todoItemsPending} />\n        <div className=\"container\">\n            &nbsp;\n        </div>\n        <footer className=\"text-center text-muted font-weight-light\">\n          <div className=\"container\">\n            <span style={{fontSize:\"12px\"}} >Created by <a href=\"https://github.com/shyamsundar055\" target=\"_blank\" rel=\"noopener noreferrer\">Shyam Sundar</a></span>\n          </div>\n        </footer>\n      </>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}